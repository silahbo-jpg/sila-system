# Convertido de audit_modules.sh por convert_shell_to_powershell.ps1\n\n<#\nEste script foi convertido automaticamente de um script shell (.sh) para PowerShell (.ps1).\nAlgumas conversões comuns foram aplicadas, mas é provável que seja necessário ajuste manual.\n\nConversões aplicadas automaticamente:\n- Comentários (# -> #)\n- Variáveis básicas ( -> \)\n\nVerifique e ajuste manualmente:\n- Comandos específicos do Linux (ls, grep, etc.) para equivalentes do PowerShell\n- Redirecionamentos de saída (>, >>, |)\n- Estruturas de controle (if, for, while)\n- Execução de comandos em sequência (;, &&, ||)\n#>\n\n# #!/bin/bash\n\n# Caminhos base\nBASE_DIR="backend/app/modules"\nTESTS_DIR="tests/modules"\nFRONTEND_PAGES="frontend/webapp/src/pages"\nFRONTEND_SERVICES="frontend/webapp/src/services"\nROUTES_FILE="backend/app/main.py"\n\n# Arquivos esperados\nEXPECTED_FILES=("crud.py" "models.py" "schemas.py")\nEXPECTED_DIRS=("routes" "tests")\n\n# Cabeçalho do relatório\nREPORT_MD="audit_report.md"\nREPORT_CSV="audit_report.csv"\nWrite-Host "| Módulo | CRUD | Schemas | Models | Rotas | Testes | Página FE | Serviço FE | Funções CRUD | Funções Teste | Status |" > "$REPORT_MD"\nWrite-Host "|--------|------|---------|--------|-------|--------|-----------|------------|--------------|--------------|--------|" >> "$REPORT_MD"\nWrite-Host "Modulo,CRUD,SCHEMAS,MODELS,ROTAS,TESTES,PAGINA_FE,SERVICO_FE,FUNCOES_CRUD,FUNCOES_TESTE,STATUS" > "$REPORT_CSV"\n\nfor module in "$BASE_DIR"/*; do\n    [ -d "$module" ] || continue\n    name=$(basename "$module")\n    status="✔️"\n\n    # Inicializa arrays para armazenar status\n    declare -A file_status\n    declare -A dir_status\n    \n    # Verifica presença dos arquivos\n    for file in "${EXPECTED_FILES[@]}"; do\n        file_status["$file"]="❌"\n        [ -f "$module/$file" ] && file_status["$file"]="✔️"\n    done\n\n    # Verifica presença dos diretórios\n    for dir in "${EXPECTED_DIRS[@]}"; do\n        dir_status["$dir"]="❌"\n        { [ -d "$module/$dir" ] || [ -f "$module/$dir.py" ]; } && dir_status["$dir"]="✔️"\n    done\n\n    # Funções implementadas\n    funcoes_crud="❌"\n    if [ -f "$module/crud.py" ]; then\n# TODO: Converter comando Linux:         grep -qE '^def |^class ' "$module/crud.py" && funcoes_crud="✔️"\n    fi\n\n    funcoes_teste="❌"\n    if [ -d "$module/tests" ]; then\n# TODO: Converter comando Linux:         grep -r -qE '^def test_' "$module/tests" && funcoes_teste="✔️"\n    elif [ -f "$module/tests.py" ]; then\n# TODO: Converter comando Linux:         grep -qE '^def test_' "$module/tests.py" && funcoes_teste="✔️"\n    fi\n\n    # Rotas expostas\n    rotas="❌"\n# TODO: Converter comando Linux:     grep -q "$name" "$ROUTES_FILE" && rotas="✔️"\n\n    # Testes globais\n    testes="❌"\n    [ -d "$TESTS_DIR/$name" ] && testes="✔️"\n\n    # Página frontend\n    pagina_fe="❌"\n    { [ -d "$FRONTEND_PAGES/$name" ] || [ -f "$FRONTEND_PAGES/$name.tsx" ]; } && pagina_fe="✔️"\n\n    # Serviço frontend\n    servico_fe="❌"\n    { [ -f "$FRONTEND_SERVICES/$name.ts" ] || [ -f "$FRONTEND_SERVICES/$name.tsx" ]; } && servico_fe="✔️"\n\n    # Status geral\n    if [[ "${file_status[crud.py]}" == "❌" || "${file_status[schemas.py]}" == "❌" || "${file_status[models.py]}" == "❌" || "$rotas" == "❌" || "$testes" == "❌" || "$pagina_fe" == "❌" || "$servico_fe" == "❌" || "$funcoes_crud" == "❌" ]]; then\n        status="⚠️ Parcial"\n    fi\n\n    # Relatório Markdown\nWrite-Host "| $name | ${file_status[crud.py]} | ${file_status[schemas.py]} | ${file_status[models.py]} | $rotas | $testes | $pagina_fe | $servico_fe | $funcoes_crud | $funcoes_teste | $status |" >> "$REPORT_MD"\n    # Relatório CSV\nWrite-Host "$name,${file_status[crud.py]},${file_status[schemas.py]},${file_status[models.py]},$rotas,$testes,$pagina_fe,$servico_fe,$funcoes_crud,$funcoes_teste,$status" >> "$REPORT_CSV"\ndone\n\nWrite-Host "/nRelatórios gerados: $REPORT_MD, $REPORT_CSV" \n\n# Fim do script convertido\n

