#!/usr/bin/env python3
"""
Gerador de Relat√≥rio de Cobertura de Testes
Executa os testes do projeto e gera um relat√≥rio de cobertura em Markdown.
"""

import subprocess
import json
import os
from pathlib import Path
from collections import defaultdict
from typing import Dict, List

def run_tests_and_get_coverage(backend_dir: Path) -> dict:
    """
    Executa os testes pytest com cobertura e retorna os dados de cobertura.
    
    Args:
        backend_dir (Path): O caminho para o diret√≥rio 'backend'.
        
    Returns:
        dict: O dicion√°rio de dados de cobertura.
    """
    # Executa pytest com as op√ß√µes de cobertura e formato de sa√≠da JSON
    print("üöÄ A executar testes com cobertura...")
    command = [
        "pytest",
        str(backend_dir / "tests"),
        f"--rootdir={backend_dir}",
        f"--cov={backend_dir}/app",
        "--cov-report=json"
    ]
    
    try:
        subprocess.run(
            command,
            check=True,
            capture_output=True,
            text=True
        )
        
        # L√™ o relat√≥rio de cobertura gerado
        coverage_file = Path(".coverage.json")
        if not coverage_file.exists():
            print("‚ùå O arquivo de relat√≥rio de cobertura (.coverage.json) n√£o foi encontrado.")
            return {}
            
        with open(coverage_file, 'r', encoding='utf-8') as f:
            coverage_data = json.load(f)
            
        os.remove(coverage_file)
        return coverage_data

    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao executar os testes: {e.stderr}")
        print("Certifique-se de que o pytest e o pytest-cov est√£o instalados.")
        print("Pode instal√°-los com: pip install pytest pytest-cov")
        return {}

def generate_markdown_report(coverage_data: dict) -> str:
    """
    Gera o conte√∫do do relat√≥rio de cobertura em formato Markdown.
    
    Args:
        coverage_data (dict): Os dados de cobertura do JSON.
        
    Returns:
        str: O conte√∫do do relat√≥rio em Markdown.
    """
    if not coverage_data:
        return "Nenhum dado de cobertura dispon√≠vel. Por favor, corrija os erros de execu√ß√£o."

    markdown_content = ["# Relat√≥rio de Cobertura de Testes\n",
                        "Este relat√≥rio fornece uma vis√£o geral da cobertura de testes do projeto `backend`.\n",
                        "---\n"]

    summary = coverage_data.get('totals', {})
    
    # Resumo Geral
    markdown_content.append("## Resumo Geral\n")
    markdown_content.append(f"- **Linhas Cobertas:** `{summary.get('covered_lines', 0)}`")
    markdown_content.append(f"- **Linhas N√£o Cobertas:** `{summary.get('missing_lines', 0)}`")
    markdown_content.append(f"- **Linhas Execut√°veis:** `{summary.get('num_statements', 0)}`")
    markdown_content.append(f"- **Cobertura Total:** `{summary.get('percent_covered', 0):.2f}%`\n")
    
    # Detalhes por Arquivo
    markdown_content.append("## Cobertura por Arquivo\n")
    markdown_content.append("| Arquivo | Cobertura | Linhas N√£o Cobertas |")
    markdown_content.append("|---|---|---|")
    
    files_data = coverage_data.get('files', {})
    sorted_files = sorted(files_data.keys())
    
    for file_path in sorted_files:
        file_summary = files_data[file_path].get('summary', {})
        percent = file_summary.get('percent_covered', 0)
        missing_lines = file_summary.get('missing_lines', [])
        missing_lines_str = ', '.join(map(str, missing_lines)) if missing_lines else "N/A"
        
        markdown_content.append(
            f"| `{file_path}` | `{percent:.2f}%` | `{missing_lines_str}` |"
        )
    
    return "\n".join(markdown_content)

def main():
    """Fun√ß√£o principal para executar e salvar o relat√≥rio."""
    print("üîç A iniciar an√°lise de cobertura de testes...")
    
    backend_dir = Path(__file__).parent.parent / "backend"
    scripts_dir = Path(__file__).parent
    
    if not backend_dir.is_dir():
        print(f"Erro: O diret√≥rio '{backend_dir}' n√£o foi encontrado.")
        return
        
    coverage_data = run_tests_and_get_coverage(backend_dir)
    
    markdown_report = generate_markdown_report(coverage_data)
    
    output_file = scripts_dir / "coverage_report.md"
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(markdown_report)
        print(f"‚úÖ Relat√≥rio de cobertura salvo em: {output_file}")
    except IOError as e:
        print(f"‚ùå Erro ao salvar o relat√≥rio: {e}")

if __name__ == "__main__":
    main()
