# Script simplificado para an√°lise de modelos
# Gera um relat√≥rio b√°sico dos modelos encontrados no projeto

# Configura√ß√£o
$basePath = (Get-Item -Path "$PSScriptRoot\..").FullName
$modulesPath = Join-Path $basePath "backend\app\modules"
$outputDir = Join-Path $basePath "reports"
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$outputFile = Join-Path $outputDir "simple_models_analysis_${timestamp}.txt"

# Garante que o diret√≥rio de sa√≠da existe
Write-Host "Verificando diret√≥rio de sa√≠da: $outputDir" -ForegroundColor Cyan
if (-not (Test-Path -Path $outputDir)) {
    Write-Host "Criando diret√≥rio de sa√≠da..." -ForegroundColor Yellow
    try {
        $null = New-Item -ItemType Directory -Path $outputDir -Force -ErrorAction Stop
        Write-Host "‚úÖ Diret√≥rio criado com sucesso" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå ERRO ao criar diret√≥rio: $_" -ForegroundColor Red
        Write-Host "Tentando criar diret√≥rio em outra localiza√ß√£o..." -ForegroundColor Yellow
        
        # Tenta criar o diret√≥rio no diret√≥rio tempor√°rio
        $outputDir = Join-Path $env:TEMP "sila_analysis"
        $outputFile = Join-Path $outputDir "simple_models_analysis_${timestamp}.txt"
        
        try {
            $null = New-Item -ItemType Directory -Path $outputDir -Force -ErrorAction Stop
            Write-Host "‚úÖ Diret√≥rio tempor√°rio criado com sucesso: $outputDir" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå ERRO cr√≠tico: N√£o foi poss√≠vel criar diret√≥rio em nenhuma localiza√ß√£o" -ForegroundColor Red
            exit 1
        }
    }
} else {
    Write-Host "‚úÖ Diret√≥rio de sa√≠da j√° existe" -ForegroundColor Green
}

Write-Host "üîç Iniciando an√°lise de modelos em: $modulesPath" -ForegroundColor Cyan
Write-Host "üìÑ Arquivo de sa√≠da: $outputFile" -ForegroundColor Cyan

# Inicializa o relat√≥rio
$report = @()
$report += "# An√°lise B√°sica dos Modelos do Backend"
$report += ""
$report += "Data da An√°lise: $(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')"
$report += "Diret√≥rio Base: $modulesPath"
$report += ""

# Verifica se o diret√≥rio de m√≥dulos existe
if (-not (Test-Path -Path $modulesPath)) {
    $errorMsg = "ERRO: O diret√≥rio de m√≥dulos n√£o foi encontrado em: $modulesPath"
    $report += "## ERRO NA ANALISE"
    $report += $errorMsg
    $report | Out-File -FilePath $outputFile -Encoding UTF8
    Write-Host $errorMsg -ForegroundColor Red
    exit 1
}

# Encontra todos os arquivos Python nos diret√≥rios de modelos
Write-Host "üîç Procurando arquivos de modelo..." -ForegroundColor Cyan
$modelFiles = @()

try {
    $allPythonFiles = Get-ChildItem -Path $modulesPath -Recurse -Filter "*.py" -ErrorAction Stop
    Write-Host "‚úÖ Encontrados $($allPythonFiles.Count) arquivos .py" -ForegroundColor Green
    
    $modelFiles = $allPythonFiles |
                 Where-Object { $_.FullName -match '\\models(?:\\|$)' -and $_.Name -ne "__init__.py" } |
                 Sort-Object FullName
                 
    Write-Host "‚úÖ Encontrados $($modelFiles.Count) arquivos de modelo" -ForegroundColor Green
} catch {
    $errorMsg = "ERRO ao buscar arquivos de modelo: $_"
    $report += "## ERRO NA ANALISE"
    $report += $errorMsg
    $report | Out-File -FilePath $outputFile -Encoding UTF8
    Write-Host $errorMsg -ForegroundColor Red
    exit 1
}

if ($modelFiles.Count -eq 0) {
    $warningMsg = "AVISO: Nenhum arquivo de modelo encontrado no diret√≥rio: $modulesPath"
    $report += "## AVISO"
    $report += $warningMsg
    $report | Out-File -FilePath $outputFile -Encoding UTF8
    Write-Host $warningMsg -ForegroundColor Yellow
    exit 0
}

# Processa os arquivos de modelo
$report += "## RESUMO DA ANALISE"
$report += "- Total de arquivos de modelo: $($modelFiles.Count)"
$report += ""

# Agrupa por m√≥dulo
$modules = @{}
foreach ($file in $modelFiles) {
    $moduleName = if ($file.DirectoryName -match '\\([^\\]+)\\models') { $matches[1] } else { "Outros" }
    if (-not $modules.ContainsKey($moduleName)) {
        $modules[$moduleName] = @()
    }
    $modules[$moduleName] += $file
}

# Adiciona an√°lise por m√≥dulo
$report += "## ANALISE POR MODULO"
$report += ""

foreach ($moduleName in ($modules.Keys | Sort-Object)) {
    $moduleFiles = $modules[$moduleName]
    $report += "### Modulo: $moduleName"
    $report += "- Arquivos: $($moduleFiles.Count)"
    $report += ""
    
    foreach ($file in $moduleFiles) {
        $report += "Arquivo: $($file.Name)"
        $report += "Caminho: $($file.FullName)"
        
        # Conta linhas de c√≥digo
        $lineCount = (Get-Content $file.FullName | Measure-Object -Line).Lines
        $report += "Linhas de c√≥digo: $lineCount"
        
        # L√™ o conte√∫do do arquivo para an√°lise b√°sica
        $content = Get-Content $file.FullName -Raw
        
        # Conta classes
        $classCount = ([regex]::Matches($content, 'class\s+\w+')).Count
        $report += "Classes encontradas: $classCount"
        
        # Verifica se tem docstring
        $hasDocstring = $content -match '"""[\s\S]*?"""'
        $report += "Possui documentacao: $(if ($hasDocstring) { 'Sim' } else { 'Nao' })"
        
        $report += ""
    }
    
    $report += "---"
    $report += ""
}

# Adiciona recomenda√ß√µes
$report += "## RECOMENDACOES"
$report += ""
$report += "1. Verificar se todos os modelos tem documentacao adequada"
$report += "2. Padronizar a estrutura dos modelos"
$report += "3. Verificar relacoes entre modelos"
$report += ""

# Salva o relat√≥rio
Write-Host "`nüìù Salvando relat√≥rio em: $outputFile" -ForegroundColor Cyan
try {
    # Mostra as primeiras 5 linhas do relat√≥rio para debug
    Write-Host "`nüìã Preview do relat√≥rio (primeiras 5 linhas):" -ForegroundColor Cyan
    $report | Select-Object -First 5 | ForEach-Object { Write-Host "  $_" -ForegroundColor Gray }
    
    # Tenta salvar o relat√≥rio
    Write-Host "`nüíæ Salvando arquivo..." -ForegroundColor Cyan
    $report | Out-File -FilePath $outputFile -Encoding UTF8 -Force -ErrorAction Stop
    
    if (Test-Path -Path $outputFile) {
        $fileInfo = Get-Item -Path $outputFile
        Write-Host "`n‚úÖ ANALISE CONCLUIDA COM SUCESSO" -ForegroundColor Green
        Write-Host "üìÑ Relatorio salvo em: $($fileInfo.FullName)" -ForegroundColor Cyan
        Write-Host "üìä Tamanho do relatorio: $($fileInfo.Length) bytes" -ForegroundColor Cyan
    } else {
        Write-Host "‚ùå ERRO: Nao foi possivel salvar o relatorio em: $outputFile" -ForegroundColor Red
    }
} catch {
    Write-Host "ERRO ao salvar o relatorio: $_" -ForegroundColor Red
    exit 1
}
