version: '3.8'

# Redes para conectar os serviços
networks:
  monitoring:
    driver: bridge
  app-network:
    driver: bridge

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: sila
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=
            if (      - DATABASE_URL=postgresql://postgres:postgres@db:5432/sila_dev?schema=public -match "sila_test") { 
                $correctTestURL 
            } else { 
                $correctDevURL 
            }
        
      - ENABLE_METRICS=true
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_metrics
    ports:
      - "8000:8000"
    volumes:
      - ../backend:/code
      - prometheus_data:/tmp/prometheus_metrics
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "sleep 5 && 
             mkdir -p /tmp/prometheus_metrics && 
             chmod 777 /tmp/prometheus_metrics && 
             cd /code && 
             python -m prisma migrate dev --name init && 
             uvicorn app.main:app --host 0.0.0.0 --port 8000"
    networks:
      - app-network
      - monitoring

  frontend:
    build:
      context: ../frontend/webapp
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./nginx/frontend.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
    networks:
      - app-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    depends_on:
      - backend
    networks:
      - monitoring

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=sila123
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - monitoring

  # Node Exporter (para métricas do sistema)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
    network_mode: host
    pid: host
    volumes:
      - '/:/host:ro,rslave'
    deploy:
      mode: global

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

