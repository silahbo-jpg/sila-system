"""Initial models

Revision ID: db385a402cb9
Revises: 
Create Date: 2025-08-29 07:25:32.983385

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'db385a402cb9'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('Inscricao')
    op.drop_index('Payment_transaction_id_key', table_name='Payment')
    op.drop_index('idx_payment_citizen', table_name='Payment')
    op.drop_index('idx_payment_initiated', table_name='Payment')
    op.drop_index('idx_payment_provider', table_name='Payment')
    op.drop_index('idx_payment_service_type', table_name='Payment')
    op.drop_index('idx_payment_status', table_name='Payment')
    op.drop_index('idx_payment_transaction', table_name='Payment')
    op.drop_table('Payment')
    op.drop_index('idx_province_code', table_name='Province')
    op.drop_index('idx_province_country', table_name='Province')
    op.drop_index('unique_province_per_country', table_name='Province')
    op.drop_table('Province')
    op.drop_index('Country_code_key', table_name='Country')
    op.drop_index('Country_name_key', table_name='Country')
    op.drop_index('idx_country_code', table_name='Country')
    op.drop_index('idx_country_name', table_name='Country')
    op.drop_table('Country')
    op.drop_index('PaymentProvider_code_key', table_name='PaymentProvider')
    op.drop_index('PaymentProvider_name_key', table_name='PaymentProvider')
    op.drop_index('idx_payment_provider_code', table_name='PaymentProvider')
    op.drop_index('idx_payment_provider_type', table_name='PaymentProvider')
    op.drop_table('PaymentProvider')
    op.drop_index('Citizen_bi_number_key', table_name='Citizen')
    op.drop_index('Citizen_email_key', table_name='Citizen')
    op.drop_index('Citizen_user_id_key', table_name='Citizen')
    op.drop_index('idx_citizen_bi', table_name='Citizen')
    op.drop_index('idx_citizen_commune', table_name='Citizen')
    op.drop_index('idx_citizen_country', table_name='Citizen')
    op.drop_index('idx_citizen_municipality', table_name='Citizen')
    op.drop_index('idx_citizen_province', table_name='Citizen')
    op.drop_table('Citizen')
    op.drop_index('idx_payment_notification_payment', table_name='PaymentNotification')
    op.drop_index('idx_payment_notification_scheduled', table_name='PaymentNotification')
    op.drop_index('idx_payment_notification_status', table_name='PaymentNotification')
    op.drop_table('PaymentNotification')
    op.drop_table('Denuncia')
    op.drop_index('NotificationTemplate_name_key', table_name='NotificationTemplate')
    op.drop_index('idx_notification_template_name', table_name='NotificationTemplate')
    op.drop_index('idx_notification_template_type', table_name='NotificationTemplate')
    op.drop_table('NotificationTemplate')
    op.drop_table('Atestado')
    op.drop_table('Ambulante')
    op.drop_index('RefreshToken_token_key', table_name='RefreshToken')
    op.drop_index('idx_refresh_token', table_name='RefreshToken')
    op.drop_index('idx_refresh_token_user', table_name='RefreshToken')
    op.drop_table('RefreshToken')
    op.drop_index('idx_health_cidadao', table_name='HealthRecord')
    op.drop_index('idx_health_user', table_name='HealthRecord')
    op.drop_table('HealthRecord')
    op.drop_table('Taxa')
    op.drop_table('_prisma_migrations')
    op.drop_table('Matricula')
    op.drop_index('idx_commune_municipality', table_name='Commune')
    op.drop_index('unique_commune_per_municipality', table_name='Commune')
    op.drop_table('Commune')
    op.drop_index('User_email_key', table_name='User')
    op.drop_index('idx_user_email', table_name='User')
    op.drop_index('idx_user_municipality', table_name='User')
    op.drop_index('idx_user_type', table_name='User')
    op.drop_table('User')
    op.drop_index('idx_notification_citizen', table_name='Notification')
    op.drop_index('idx_notification_payment', table_name='Notification')
    op.drop_index('idx_notification_scheduled', table_name='Notification')
    op.drop_index('idx_notification_status', table_name='Notification')
    op.drop_index('idx_notification_type', table_name='Notification')
    op.drop_index('idx_notification_user', table_name='Notification')
    op.drop_table('Notification')
    op.drop_index('idx_municipality_province', table_name='Municipality')
    op.drop_index('idx_municipality_slug', table_name='Municipality')
    op.drop_index('unique_municipality_per_province', table_name='Municipality')
    op.drop_index('unique_municipality_slug', table_name='Municipality')
    op.drop_table('Municipality')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Municipality',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Municipality_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('slug', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('capital', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('population', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('area_km2', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('province_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['province_id'], ['Province.id'], name='Municipality_province_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name='Municipality_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('unique_municipality_slug', 'Municipality', ['slug'], unique=False)
    op.create_index('unique_municipality_per_province', 'Municipality', ['province_id', 'name'], unique=False)
    op.create_index('idx_municipality_slug', 'Municipality', ['slug'], unique=False)
    op.create_index('idx_municipality_province', 'Municipality', ['province_id'], unique=False)
    op.create_table('Notification',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Notification_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('recipient', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('subject', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'::text"), autoincrement=False, nullable=False),
    sa.Column('attempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('max_attempts', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=False),
    sa.Column('scheduled_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('sent_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('delivered_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('failed_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('next_attempt_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('provider_response', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('template_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('citizen_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('payment_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('priority', sa.TEXT(), server_default=sa.text("'normal'::text"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['citizen_id'], ['Citizen.id'], name='Notification_citizen_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['payment_id'], ['Payment.id'], name='Notification_payment_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['template_id'], ['NotificationTemplate.id'], name='Notification_template_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], name='Notification_user_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='Notification_pkey')
    )
    op.create_index('idx_notification_user', 'Notification', ['user_id'], unique=False)
    op.create_index('idx_notification_type', 'Notification', ['type'], unique=False)
    op.create_index('idx_notification_status', 'Notification', ['status'], unique=False)
    op.create_index('idx_notification_scheduled', 'Notification', ['scheduled_at'], unique=False)
    op.create_index('idx_notification_payment', 'Notification', ['payment_id'], unique=False)
    op.create_index('idx_notification_citizen', 'Notification', ['citizen_id'], unique=False)
    op.create_table('User',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"User_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('role', sa.TEXT(), server_default=sa.text("'user'::text"), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('failed_attempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('last_login', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('locked_until', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('municipality_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_type', sa.TEXT(), server_default=sa.text("'citizen'::text"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['municipality_id'], ['Municipality.id'], name='User_municipality_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='User_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_user_type', 'User', ['user_type'], unique=False)
    op.create_index('idx_user_municipality', 'User', ['municipality_id'], unique=False)
    op.create_index('idx_user_email', 'User', ['email'], unique=False)
    op.create_index('User_email_key', 'User', ['email'], unique=False)
    op.create_table('Commune',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Commune_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('population', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('area_km2', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('municipality_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['municipality_id'], ['Municipality.id'], name='Commune_municipality_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name='Commune_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('unique_commune_per_municipality', 'Commune', ['municipality_id', 'name'], unique=False)
    op.create_index('idx_commune_municipality', 'Commune', ['municipality_id'], unique=False)
    op.create_table('Matricula',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Matricula_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('escola', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('ano_letivo', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='Matricula_pkey')
    )
    op.create_table('_prisma_migrations',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('migration_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('logs', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rolled_back_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('applied_steps_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='_prisma_migrations_pkey')
    )
    op.create_table('Taxa',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Taxa_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('valor', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('tipo', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='Taxa_pkey')
    )
    op.create_table('HealthRecord',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"HealthRecord_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('cidadaoId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('descricao', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('dataRegistro', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'ativo'::text"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], name='HealthRecord_user_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='HealthRecord_pkey')
    )
    op.create_index('idx_health_user', 'HealthRecord', ['user_id'], unique=False)
    op.create_index('idx_health_cidadao', 'HealthRecord', ['cidadaoId'], unique=False)
    op.create_table('RefreshToken',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"RefreshToken_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('revoked', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('revoked_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('replaced_by', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], name='RefreshToken_user_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='RefreshToken_pkey')
    )
    op.create_index('idx_refresh_token_user', 'RefreshToken', ['user_id'], unique=False)
    op.create_index('idx_refresh_token', 'RefreshToken', ['token'], unique=False)
    op.create_index('RefreshToken_token_key', 'RefreshToken', ['token'], unique=False)
    op.create_table('Ambulante',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Ambulante_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('nome', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('local_venda', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('tipo_produto', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='Ambulante_pkey')
    )
    op.create_table('Atestado',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Atestado_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('data', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='Atestado_pkey')
    )
    op.create_table('NotificationTemplate',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"NotificationTemplate_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('subject', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('language', sa.TEXT(), server_default=sa.text("'pt'::text"), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='NotificationTemplate_pkey')
    )
    op.create_index('idx_notification_template_type', 'NotificationTemplate', ['type'], unique=False)
    op.create_index('idx_notification_template_name', 'NotificationTemplate', ['name'], unique=False)
    op.create_index('NotificationTemplate_name_key', 'NotificationTemplate', ['name'], unique=False)
    op.create_table('Denuncia',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Denuncia_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('descricao', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('localizacao', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='Denuncia_pkey')
    )
    op.create_table('PaymentNotification',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"PaymentNotification_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('payment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('notification_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('attempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('max_attempts', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=False),
    sa.Column('recipient', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('response_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('scheduled_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('sent_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('delivered_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('next_attempt_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['payment_id'], ['Payment.id'], name='PaymentNotification_payment_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name='PaymentNotification_pkey')
    )
    op.create_index('idx_payment_notification_status', 'PaymentNotification', ['status'], unique=False)
    op.create_index('idx_payment_notification_scheduled', 'PaymentNotification', ['scheduled_at'], unique=False)
    op.create_index('idx_payment_notification_payment', 'PaymentNotification', ['payment_id'], unique=False)
    op.create_table('Citizen',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Citizen_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('full_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('bi_number', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('birth_date', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('gender', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('phone', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('country_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('province_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('municipality_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('commune_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('neighborhood', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('street', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('house_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('postal_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('verified_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['commune_id'], ['Commune.id'], name='Citizen_commune_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['country_id'], ['Country.id'], name='Citizen_country_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['municipality_id'], ['Municipality.id'], name='Citizen_municipality_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['province_id'], ['Province.id'], name='Citizen_province_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['User.id'], name='Citizen_user_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='Citizen_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_citizen_province', 'Citizen', ['province_id'], unique=False)
    op.create_index('idx_citizen_municipality', 'Citizen', ['municipality_id'], unique=False)
    op.create_index('idx_citizen_country', 'Citizen', ['country_id'], unique=False)
    op.create_index('idx_citizen_commune', 'Citizen', ['commune_id'], unique=False)
    op.create_index('idx_citizen_bi', 'Citizen', ['bi_number'], unique=False)
    op.create_index('Citizen_user_id_key', 'Citizen', ['user_id'], unique=False)
    op.create_index('Citizen_email_key', 'Citizen', ['email'], unique=False)
    op.create_index('Citizen_bi_number_key', 'Citizen', ['bi_number'], unique=False)
    op.create_table('PaymentProvider',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"PaymentProvider_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='PaymentProvider_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_payment_provider_type', 'PaymentProvider', ['type'], unique=False)
    op.create_index('idx_payment_provider_code', 'PaymentProvider', ['code'], unique=False)
    op.create_index('PaymentProvider_name_key', 'PaymentProvider', ['name'], unique=False)
    op.create_index('PaymentProvider_code_key', 'PaymentProvider', ['code'], unique=False)
    op.create_table('Country',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Country_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('capital', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='Country_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_country_name', 'Country', ['name'], unique=False)
    op.create_index('idx_country_code', 'Country', ['code'], unique=False)
    op.create_index('Country_name_key', 'Country', ['name'], unique=False)
    op.create_index('Country_code_key', 'Country', ['code'], unique=False)
    op.create_table('Province',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Province_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('capital', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('country_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['Country.id'], name='Province_country_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name='Province_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('unique_province_per_country', 'Province', ['country_id', 'name'], unique=False)
    op.create_index('idx_province_country', 'Province', ['country_id'], unique=False)
    op.create_index('idx_province_code', 'Province', ['code'], unique=False)
    op.create_table('Payment',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Payment_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('transaction_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('reference_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('currency', sa.TEXT(), server_default=sa.text("'AOA'::text"), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('service_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'pending'::text"), autoincrement=False, nullable=False),
    sa.Column('payment_method', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('payer_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('payer_phone', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('payer_email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('payer_account', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('provider_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('provider_reference', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('provider_response', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('initiated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('citizen_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['citizen_id'], ['Citizen.id'], name='Payment_citizen_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['provider_id'], ['PaymentProvider.id'], name='Payment_provider_id_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name='Payment_pkey')
    )
    op.create_index('idx_payment_transaction', 'Payment', ['transaction_id'], unique=False)
    op.create_index('idx_payment_status', 'Payment', ['status'], unique=False)
    op.create_index('idx_payment_service_type', 'Payment', ['service_type'], unique=False)
    op.create_index('idx_payment_provider', 'Payment', ['provider_id'], unique=False)
    op.create_index('idx_payment_initiated', 'Payment', ['initiated_at'], unique=False)
    op.create_index('idx_payment_citizen', 'Payment', ['citizen_id'], unique=False)
    op.create_index('Payment_transaction_id_key', 'Payment', ['transaction_id'], unique=False)
    op.create_table('Inscricao',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Inscricao_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('tipo', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('instituicao', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='Inscricao_pkey')
    )
    # ### end Alembic commands ###
